```python
class Stack:
    """
    A simple implementation of a stack data structure in Python.
    """

    def __init__(self):
        """
        Initializes an empty stack.
        """
        self.items = []

    def is_empty(self):
        """
        Checks if the stack is empty.

        Returns:
            bool: True if the stack is empty, False otherwise.
        """
        return len(self.items) == 0

    def push(self, item):
        """
        Adds an item to the top of the stack.

        Args:
            item: The item to be added.
        """
        self.items.append(item)

    def pop(self):
        """
        Removes and returns the item at the top of the stack.

        Returns:
            any: The item at the top of the stack, or None if the stack is empty.
        """
        if self.is_empty():
            return None
        return self.items.pop()

    def peek(self):
        """
        Returns the item at the top of the stack without removing it.

        Returns:
            any: The item at the top of the stack, or None if the stack is empty.
        """
        if self.is_empty():
            return None
        return self.items[-1]

    def size(self):
        """
        Returns the number of items in the stack.

        Returns:
            int: The size of the stack.
        """
        return len(self.items)

# Example usage:
if __name__ == "__main__":
    my_stack = Stack()

    print("Stack is empty:", my_stack.is_empty())

    my_stack.push(10)
    my_stack.push(20)
    my_stack.push(30)

    print("Stack size:", my_stack.size())
    print("Top element:", my_stack.peek())

    print("Popped element:", my_stack.pop())
    print("Popped element:", my_stack.pop())

    print("Stack size:", my_stack.size())
    print("Top element:", my_stack.peek())
```

**Explanation:**

1. **Class Definition:** The code defines a class `Stack` to represent the stack data structure.

2. **Constructor (`__init__`)**:
   - Initializes an empty list `self.items` to store the stack elements.

3. **`is_empty()`**:
   - Returns `True` if the stack is empty (i.e., `self.items` is empty), otherwise `False`.

4. **`push(item)`**:
   - Adds an `item` to the end of the `self.items` list, effectively placing it at the top of the stack.

5. **`pop()`**:
   - If the stack is not empty, it removes and returns the last element in `self.items` (the top element).
   - If the stack is empty, it returns `None`.

6. **`peek()`**:
   - If the stack is not empty, it returns the last element in `self.items` (the top element) without removing it.
   - If the stack is empty, it returns `None`.

7. **`size()`**:
   - Returns the number of elements in the stack by getting the length of the `self.items` list.

**Example Usage:**

The code provides an example of how to use the `Stack` class. It:

- Creates a new `Stack` object.
- Pushes three elements onto the stack.
- Checks the stack size and the top element.
- Pops two elements off the stack.
- Checks the new stack size and the top element.

This example demonstrates the basic operations of a stack, such as pushing, popping, peeking, and checking if it's empty.
